// Code generated by sqlc. DO NOT EDIT.
// source: active_sessions.sql

package db

import (
	"context"
)

const createActiveSession = `-- name: CreateActiveSession :exec
INSERT INTO active_sessions (
  session_id, user_id
) VALUES (?, ?)
`

type CreateActiveSessionParams struct {
	SessionID string
	UserID    string
}

func (q *Queries) CreateActiveSession(ctx context.Context, arg CreateActiveSessionParams) error {
	_, err := q.db.ExecContext(ctx, createActiveSession, arg.SessionID, arg.UserID)
	return err
}

const deleteActiveSessionsForUser = `-- name: DeleteActiveSessionsForUser :exec
DELETE FROM active_sessions WHERE user_id = ?
`

func (q *Queries) DeleteActiveSessionsForUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteActiveSessionsForUser, userID)
	return err
}

const getActiveSessions = `-- name: GetActiveSessions :many
SELECT session_id, user_id, created_at FROM active_sessions WHERE user_id = ?
`

func (q *Queries) GetActiveSessions(ctx context.Context, userID string) ([]ActiveSession, error) {
	rows, err := q.db.QueryContext(ctx, getActiveSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActiveSession
	for rows.Next() {
		var i ActiveSession
		if err := rows.Scan(&i.SessionID, &i.UserID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
